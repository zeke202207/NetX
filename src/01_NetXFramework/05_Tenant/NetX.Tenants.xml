<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetX.Tenants</name>
    </assembly>
    <members>
        <member name="T:NetX.Tenants.NetXPrincipal">
            <summary>
            主体对象
            用户信息、角色信息等
            </summary>
        </member>
        <member name="F:NetX.Tenants.NetXPrincipal.Identity">
            <summary>
            身份信息
            </summary>
        </member>
        <member name="P:NetX.Tenants.NetXPrincipal.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:NetX.Tenants.NetXPrincipal.UserId">
            <summary>
            内部唯一标识
            </summary>
        </member>
        <member name="P:NetX.Tenants.NetXPrincipal.UserName">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:NetX.Tenants.NetXPrincipal.DisplayName">
            <summary>
            显示名
            </summary>
        </member>
        <member name="P:NetX.Tenants.NetXPrincipal.IsAuthenticated">
            <summary>
            是否已授权
            </summary>
        </member>
        <member name="M:NetX.Tenants.NetXPrincipal.#ctor(NetX.Tenants.Tenant)">
            <summary>
            
            </summary>
            <param name="tenant"></param>
        </member>
        <member name="M:NetX.Tenants.NetXPrincipal.#ctor(System.Security.Principal.IIdentity,NetX.Tenants.Tenant)">
            <summary>
            
            </summary>
            <param name="identity"></param>
            <param name="tenant"></param>
        </member>
        <member name="M:NetX.Tenants.NetXPrincipal.SetIdentityInfo(System.Security.Principal.IIdentity)">
            <summary>
            设置身份信息
            </summary>
            <param name="identity"></param>
        </member>
        <member name="T:NetX.Tenants.TenantContext">
            <summary>
            租户上下文
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.CurrentTenant">
            <summary>
            当前线程的租户上下文信息
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.TenantType">
            <summary>
            租户系统类型
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.DatabaseInfo">
            <summary>
            数据库配置信息 
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.IsAuthenticated">
            <summary>
            是否已授权
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.ConnectionStr">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.CreateSchemaConnectionStr">
            <summary>
            创建数据需要的连接字符串
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.DatabaseName">
            <summary>
            Schema Name
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantContext.InitPrincipal(NetX.Tenants.NetXPrincipal,NetX.Tenants.TenantOption)">
            <summary>
            初始化租户信息
            </summary>
            <param name="principal"></param>
            <param name="tenantOption"></param>
        </member>
        <member name="P:NetX.Tenants.TenantContext.Principal">
            <summary>
            主体对象
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantContext.TenantOption">
            <summary>
            当前租户类型
            </summary>
        </member>
        <member name="T:NetX.Tenants.ApplicationBuilderExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Tenants.ApplicationBuilderExtensions.UseMultiTenancy``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Teanant Middleware to process the request
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.ApplicationBuilderExtensions.UseMultiTenancy(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Teanant Middleware to process the request
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.ApplicationBuilderExtensions.UserTenancyDatabase(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            使用租户数据库
            </summary>
            <param name="app"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.HttpContextExtensions">
            <summary>
            扩展http上下文，使multi tenancy 使用起来更方便 
            </summary>
        </member>
        <member name="M:NetX.Tenants.HttpContextExtensions.GetTenant``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前租户信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.HttpContextExtensions.GetTenant(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前租户信息
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.ServiceCollectionExtensions">
            <summary>
            多租户注入
            </summary>
        </member>
        <member name="M:NetX.Tenants.ServiceCollectionExtensions.AddTenancy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.Tenants.TenantType)">
            <summary>
            多租户注入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="tenantType">租户类型，如果租户类型为单租户，<see cref="T:NetX.Tenants.TenantBuilder`1"/>将忽略所有注入</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.ServiceCollectionExtensions.AddTenancy(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.Tenants.TenantType)">
            <summary>
            多租户注入 
            </summary>
            <param name="service"></param>
            <param name="tenantType">租户类型，如果租户类型为单租户，<see cref="T:NetX.Tenants.TenantBuilder`1"/>将忽略所有注入</param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantBuilder`1">
            <summary>
            配置tenant的services 
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.Tenants.TenantType)">
            <summary>
            租户注入构建器
            </summary>
            <param name="services"></param>
            <param name="tenantType"></param>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.WithDatabaseInfo(NetX.Tenants.DatabaseInfo)">
            <summary>
            配置数据库
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            注册租户解析实现
            </summary>
            <typeparam name="V"></typeparam>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            注册租户信息存储实现
            </summary>
            <typeparam name="V"></typeparam>
            <param name="serviceLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.WithPerTenantOptions``1(System.Action{``0,`0})">
            <summary>
            每个租户注册单独的配置
            </summary>
            <typeparam name="TOptions">Type of options we are apply configuration to</typeparam>
            <param name="tenantConfig">Action to configure options for a tenant</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.DefaultSingleTenant">
            <summary>
            默认单租户注入
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.WithTenancyDatabase">
            <summary>
            使用租户数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantBuilder`1.Build">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantExtension">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantExtension.ToConnStr(NetX.Tenants.DatabaseInfo)">
            <summary>
            
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantExtension.ToConnStr(NetX.Tenants.DatabaseInfo,NetX.Tenants.TenantType,System.String)">
            <summary>
            数据库连接字符串
            </summary>
            <param name="model"></param>
            <param name="type"></param>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantExtension.ToDatabaseName(NetX.Tenants.DatabaseInfo,NetX.Tenants.TenantType,System.String)">
            <summary>
            数据库Schema name
            </summary>
            <param name="model"></param>
            <param name="type"></param>
            <param name="TenantId"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantExtension.ToCreateDatabaseConnStr(NetX.Tenants.DatabaseInfo)">
            <summary>
            获取创建数据库连接字符串
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantExtension.ToDatabaseType(NetX.Tenants.DatabaseType)">
            <summary>
            数据库类型转换
            </summary>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantMiddleware`1">
            <summary>
            租户中间件
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantMiddleware`1.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            租户中间件实例
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:NetX.Tenants.TenantMiddleware`1.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.InMemoryTenantStore">
            <summary>
            内存租户信息存储
            </summary>
        </member>
        <member name="M:NetX.Tenants.InMemoryTenantStore.#ctor(NetX.Tenants.TenantOption)">
            <summary>
            内存租户信息存储实例
            </summary>
            <param name="tenantOption"></param>
        </member>
        <member name="M:NetX.Tenants.InMemoryTenantStore.GetTenantAsync(System.String)">
            <summary>
            根据租户身份获取租户信息
            </summary>
            <param name="Identifier">租户身份</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.InMemoryTenantProvider.Init">
            <summary>
            配置文件初始化Tenants列表
            </summary>
        </member>
        <member name="T:NetX.Tenants.HeaderResolutionStrategy">
            <summary>
            请求头解析策略
            </summary>
        </member>
        <member name="M:NetX.Tenants.HeaderResolutionStrategy.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            请求头解析策略实例
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:NetX.Tenants.HeaderResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            从请求头获取租户唯一标识
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.HostResolutionStrategy">
            <summary>
            根据主机解析租户身份
            </summary>
        </member>
        <member name="M:NetX.Tenants.HostResolutionStrategy.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            主机解析策略
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:NetX.Tenants.HostResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            解析租户身份 
            </summary>
            <returns>租户身份标识</returns>
        </member>
        <member name="T:NetX.Tenants.TenantAccessor`1">
            <summary>
            租户访问器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetX.Tenants.TenantAccessor`1.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            租户访问器实例
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="P:NetX.Tenants.TenantAccessor`1.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="T:NetX.Tenants.TenantAccessService`1">
            <summary>
            租户访问访问
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantAccessService`1.#ctor(NetX.Tenants.ITenantResolutionStrategy,NetX.Tenants.ITenantStore{`0})">
            <summary>
            租户访问访问实例
            </summary>
            <param name="tenantResolutionStrategy"></param>
            <param name="tenantStore"></param>
        </member>
        <member name="M:NetX.Tenants.TenantAccessService`1.GetTenatnAsync">
            <summary>
            获取当前租户信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantOptions`1">
            <summary>
            Make IOptions tenant aware
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantOptions`1.#ctor(Microsoft.Extensions.Options.IOptionsFactory{`0},Microsoft.Extensions.Options.IOptionsMonitorCache{`0})">
            <summary>
            
            </summary>
            <param name="factory"></param>
            <param name="cache"></param>
        </member>
        <member name="P:NetX.Tenants.TenantOptions`1.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantOptions`1.Get(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantOptionsCache`2">
            <summary>
            租户选项缓存
            为每一个租户维护一个专有的选项缓存
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsCache`2.#ctor(NetX.Tenants.ITenantAccessor{`1})">
            <summary>
            
            </summary>
            <param name="tenantAccessor"></param>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsCache`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsCache`2.GetOrAdd(System.String,System.Func{`0})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="createOptions"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsCache`2.TryAdd(System.String,`0)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsCache`2.TryRemove(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantOptionsCacheDictionary`1">
            <summary>
            租户选项缓存字典包装器
            </summary>
        </member>
        <member name="F:NetX.Tenants.TenantOptionsCacheDictionary`1._tenantSpecificOptionCaches">
            <summary>
            Caches stored in memory
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsCacheDictionary`1.Get(System.String)">
            <summary>
            Get options for specific tenant (create if not exists)
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.TenantOptionsFactory`2">
            <summary>
            租户配置项感知工厂 
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetX.Tenants.TenantOptionsFactory`2.Create(System.String)">
            <summary>
            Create a new options instance
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.ITenantAccessor`1">
            <summary>
            租户访问器 
            </summary>
        </member>
        <member name="P:NetX.Tenants.ITenantAccessor`1.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="T:NetX.Tenants.ITenantResolutionStrategy">
            <summary>
            组合解析策略
            </summary>
        </member>
        <member name="M:NetX.Tenants.ITenantResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            解析获取租户身份
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.ITenantStore`1">
            <summary>
            租户存储接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetX.Tenants.ITenantStore`1.GetTenantAsync(System.String)">
            <summary>
            根据租户身份，获取租户信息
            </summary>
            <param name="Identifier">租户身份</param>
            <returns></returns>
        </member>
        <member name="T:NetX.Tenants.DatabaseInfo">
            <summary>
            数据库配置信息
            </summary>
        </member>
        <member name="P:NetX.Tenants.DatabaseInfo.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:NetX.Tenants.DatabaseInfo.DatabaseHost">
            <summary>
            数据库主机
            </summary>
        </member>
        <member name="P:NetX.Tenants.DatabaseInfo.DatabasePort">
            <summary>
            数据库端口
            </summary>
        </member>
        <member name="P:NetX.Tenants.DatabaseInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:NetX.Tenants.DatabaseInfo.UserId">
            <summary>
            数据库登录user
            </summary>
        </member>
        <member name="P:NetX.Tenants.DatabaseInfo.Password">
            <summary>
            数据库登录密码 
            </summary>
        </member>
        <member name="T:NetX.Tenants.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:NetX.Tenants.Tenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:NetX.Tenants.Tenant.Identifier">
            <summary>
            租户身份标识
            在解析策略中使用此标识符进行解析
            </summary>
        </member>
        <member name="P:NetX.Tenants.Tenant.Items">
            <summary>
            The Tenant Items
            </summary>
        </member>
        <member name="T:NetX.Tenants.TenantOption">
            <summary>
            租户设置信息
            </summary>
        </member>
        <member name="M:NetX.Tenants.TenantOption.#ctor(NetX.Tenants.TenantType)">
            <summary>
            租户配置信息
            </summary>
            <param name="tenantType"></param>
        </member>
        <member name="P:NetX.Tenants.TenantOption.TenantType">
            <summary>
            应用程序租户类型
            </summary>
        </member>
        <member name="P:NetX.Tenants.TenantOption.DatabaseInfo">
            <summary>
            应用程序数据配置
            </summary>
        </member>
        <member name="T:NetX.Tenants.TenantConst">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetX.Tenants.TenantConst.C_TENANT_HTTPREQUESTHEADERKEY">
            <summary>
            http请求头租户key标识
            </summary>
        </member>
        <member name="F:NetX.Tenants.TenantConst.C_TENANT_HTTPCONTEXTTENANTKEY">
            <summary>
            tenantcontext上下文标识
            </summary>
        </member>
        <member name="T:NetX.Tenants.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:NetX.Tenants.DatabaseType.MySql">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.Tenants.TenantType">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="F:NetX.Tenants.TenantType.Single">
            <summary>
            单租户系统
            </summary>
        </member>
        <member name="F:NetX.Tenants.TenantType.Multi">
            <summary>
            多租户系统
            </summary>
        </member>
    </members>
</doc>
