<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetX.Logging</name>
    </assembly>
    <members>
        <member name="T:NetX.Logging.ConsoleColors">
            <summary>
            控制台颜色结构
            </summary>
        </member>
        <member name="M:NetX.Logging.ConsoleColors.#ctor(System.Nullable{System.ConsoleColor},System.Nullable{System.ConsoleColor})">
            <summary>
            构造函数
            </summary>
            <param name="foreground"></param>
            <param name="background"></param>
        </member>
        <member name="P:NetX.Logging.ConsoleColors.Foreground">
            <summary>
            前景色
            </summary>
        </member>
        <member name="P:NetX.Logging.ConsoleColors.Background">
            <summary>
            背景色
            </summary>
        </member>
        <member name="T:NetX.Logging.NetXLogger">
            <summary>
            数据库日志记录器
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:NetX.Logging.NetXLogger.ExcludesOfLogCategoryName">
            <summary>
            排除日志分类名
            </summary>
            <remarks>避免数据库日志死循环</remarks>
        </member>
        <member name="F:NetX.Logging.NetXLogger._logName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:NetX.Logging.NetXLogger._databaseLoggerProvider">
            <summary>
            数据库记录器提供器
            </summary>
        </member>
        <member name="F:NetX.Logging.NetXLogger._options">
            <summary>
            日志配置选项
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLogger.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:NetX.Logging.NetXLogger.#ctor(System.String,NetX.Logging.NetXLoggerProvider)">
            <summary>
            构造函数
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="databaseLoggerProvider">数据库记录器提供器</param>
        </member>
        <member name="M:NetX.Logging.NetXLogger.BeginScope``1(``0)">
            <summary>
            开始逻辑操作范围
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="state">要写入的项/对象</param>
            <returns><see cref="T:System.IDisposable"/></returns>
        </member>
        <member name="M:NetX.Logging.NetXLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            检查是否已启用给定日志级别
            </summary>
            <param name="logLevel">日志级别</param>
            <returns><see cref="T:System.Boolean"/></returns>
        </member>
        <member name="M:NetX.Logging.NetXLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            写入日志项
            </summary>
            <typeparam name="TState">标识符类型参数</typeparam>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="state">要写入的项/对象</param>
            <param name="exception">异常对象</param>
            <param name="formatter">日志格式化器</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="T:NetX.Logging.NetXLoggerOptions">
            <summary>
            数据库记录器配置选项
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLoggerOptions.WriteFilter">
            <summary>
            自定义日志筛选器
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLoggerOptions.MinimumLevel">
            <summary>
            最低日志记录级别
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLoggerOptions.MessageFormat">
            <summary>
            自定义日志消息格式化程序
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLoggerOptions.HandleWriteError">
            <summary>
            自定义数据库日志写入错误程序
            </summary>
            <remarks>主要解决日志在写入过程出现异常问题</remarks>
            <example>
            options.HandleWriteError = (err) => {
                // do anything
            };
            </example>
        </member>
        <member name="P:NetX.Logging.NetXLoggerOptions.UseUtcTimestamp">
            <summary>
            是否使用 UTC 时间戳，默认 false
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLoggerOptions.DateFormat">
            <summary>
            日期格式化
            </summary>
        </member>
        <member name="T:NetX.Logging.NetXLoggerProvider">
            <summary>
            数据库日志记录器提供程序
            </summary>
            <remarks>https://docs.microsoft.com/zh-cn/dotnet/core/extensions/custom-logging-provider</remarks>
        </member>
        <member name="F:NetX.Logging.NetXLoggerProvider._databaseLoggers">
            <summary>
            存储多日志类的日志记录器
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXLoggerProvider.LoggerOptions">
            <summary>
            数据库日志配置选项
            </summary>
        </member>
        <member name="F:NetX.Logging.NetXLoggerProvider._logMessageQueue">
            <summary>
            日志消息队列（线程安全）
            </summary>
        </member>
        <member name="F:NetX.Logging.NetXLoggerProvider._databaseLoggingWriter">
            <summary>
            数据库日志写入器
            </summary>
        </member>
        <member name="F:NetX.Logging.NetXLoggerProvider._serviceScope">
            <summary>
            数据库日志写入器作用域范围
            </summary>
        </member>
        <member name="F:NetX.Logging.NetXLoggerProvider._processQueueTask">
            <summary>
            长时间运行的后台任务
            </summary>
            <remarks>实现不间断写入</remarks>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.#ctor(NetX.Logging.NetXLoggerOptions)">
            <summary>
            构造函数
            </summary>
            <param name="databaseLoggerOptions"></param>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.CreateLogger(System.String)">
            <summary>
            
            </summary>
            <param name="categoryName"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.Dispose">
            <summary>
            释放托管资源
            </summary>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.WriteToQueue(NetX.Logging.LogMessage)">
            <summary>
            将日志消息写入队列中等待后台任务出队写入数据库
            </summary>
            <param name="logMsg">结构化日志消息</param>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.SetServiceProvider(System.IServiceProvider,System.Type)">
            <summary>
            设置服务提供器
            </summary>
            <param name="serviceProvider"></param>
            <param name="databaseLoggingWriterType"></param>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.ProcessQueue">
            <summary>
            将日志消息写入数据库中
            </summary>
        </member>
        <member name="M:NetX.Logging.NetXLoggerProvider.ClearScopeContext(System.String)">
            <summary>
            清空日志上下文
            </summary>
            <param name="categoryName"></param>
        </member>
        <member name="T:NetX.Logging.NetXWriteError">
            <summary>
            数据库写入错误信息上下文
            </summary>
        </member>
        <member name="P:NetX.Logging.NetXWriteError.Exception">
            <summary>
            引发数据库写入异常信息
            </summary>
        </member>
        <member name="T:NetX.Logging.ILoggerExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.Logging.ILogger"/> 拓展
            </summary>
        </member>
        <member name="M:NetX.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="properties">建议使用 ConcurrentDictionary 类型</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,System.Action{NetX.Logging.LogContext})">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.ILoggerExtensions.ScopeContext(Microsoft.Extensions.Logging.ILogger,NetX.Logging.LogContext)">
            <summary>
            配置日志上下文
            </summary>
            <param name="logger"></param>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Logging.LoggingBuilderExtensions">
            <summary>
            日志构建起扩展类
            </summary>
        </member>
        <member name="M:NetX.Logging.LoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,System.Action{NetX.Logging.NetXLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TLoggingWriter">实现自 <see cref="T:NetX.Logging.ILoggingWriter"/></typeparam>
            <param name="builder">日志构建器</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns><see cref="T:Microsoft.Extensions.Logging.ILoggingBuilder"/></returns>
        </member>
        <member name="M:NetX.Logging.LoggingBuilderExtensions.AddDatabase``1(Microsoft.Extensions.Logging.ILoggingBuilder,NetX.Logging.NetXLoggerOptions,System.Action{NetX.Logging.NetXLoggerOptions})">
            <summary>
            添加数据库日志记录器
            </summary>
            <typeparam name="TLoggingWriter"></typeparam>
            <param name="builder"></param>
            <param name="options"></param>
            <param name="configure"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.LoggingBuilderExtensions.AddProvider``1(NetX.Logging.NetXLoggerProvider,Microsoft.Extensions.Logging.ILoggingBuilder)">
            <summary>
            注入日志提供器
            </summary>
            <typeparam name="TLoggingWriter"></typeparam>
            <param name="netXLoggerProvider"></param>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Logging.LoggingServiceCollectionExtensions">
            <summary>
            日志访问扩展类
            </summary>
        </member>
        <member name="M:NetX.Logging.LoggingServiceCollectionExtensions.AddMonitorLogging(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{NetX.Logging.Monitors.LoggingMonitorSettings})">
            <summary>
            添加日志监视器服务
            </summary>
            <param name="services"></param>
            <param name="configure">添加更多配置</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{NetX.Logging.NetXLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.LoggingServiceCollectionExtensions.AddDatabaseLogging``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{NetX.Logging.NetXLoggerOptions})">
            <summary>
            添加数据库日志服务
            </summary>
            <param name="services"></param>
            <param name="configuraionKey">配置文件对于的 Key</param>
            <param name="configure">数据库日志记录器配置选项委托</param>
            <returns></returns>
        </member>
        <member name="T:NetX.Logging.ILoggingWriter">
            <summary>
            日志写入器
            </summary>
        </member>
        <member name="M:NetX.Logging.ILoggingWriter.Write(NetX.Logging.LogMessage)">
            <summary>
            写入日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:NetX.Logging.LogContext">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Logging.LogContext.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:NetX.Logging.LogContext.Properties">
            <summary>
            日志上下文数据
            </summary>
        </member>
        <member name="M:NetX.Logging.LogContext.Set(System.Object,System.Object)">
            <summary>
            设置上下文数据
            </summary>
            <param name="key">键</param>
            <param name="value">值</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.LogContext.SetRange(System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            批量设置上下文数据
            </summary>
            <param name="properties"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.LogContext.Get(System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.LogContext.Get``1(System.Object)">
            <summary>
            获取上下文数据
            </summary>
            <param name="key">键</param>
            <returns></returns>
        </member>
        <member name="T:NetX.Logging.LoggingConst">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetX.Logging.LoggingConst.C_LOGGING_CONFIG_MONITOR">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetX.Logging.LoggingConst.C_LOGGING_CONFIG_OPTION">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetX.Logging.LoggingConst.C_LOGGING_TENANTCONTEXT_KEY">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetX.Logging.LoggingConst.C_LOGGING_EXCEPTION_SEPARATOR">
            <summary>
            异常分隔符
            </summary>
        </member>
        <member name="T:NetX.Logging.LogMessage">
            <summary>
            日志实体类
            </summary>
        </member>
        <member name="M:NetX.Logging.LogMessage.#ctor(System.String,Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,System.String,System.Exception,NetX.Logging.LogContext,System.Object,System.DateTime,System.Int32,System.String)">
            <summary>
            日志对象实例
            </summary>
            <param name="logName">记录器类别名称</param>
            <param name="logLevel">日志级别</param>
            <param name="eventId">事件 Id</param>
            <param name="message">日志消息</param>
            <param name="exception">异常对象</param>
            <param name="context">日志上下文</param>
            <param name="state"></param>
            <param name="logDateTime">日志记录时间</param>
            <param name="threadId">线程id</param>
            <param name="tenandId"></param>
        </member>
        <member name="F:NetX.Logging.LogMessage.TenandId">
            <summary>
            租户唯一标识
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.LogName">
            <summary>
            记录器类别名称
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.LogLevel">
            <summary>
            日志级别
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.EventId">
            <summary>
            事件 Id
            </summary>
        </member>
        <member name="P:NetX.Logging.LogMessage.Message">
            <summary>
            日志消息
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.Exception">
            <summary>
            异常对象
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.State">
            <summary>
            状态
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.LogDateTime">
            <summary>
            日志记录时间
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.ThreadId">
            <summary>
            线程 Id
            </summary>
        </member>
        <member name="F:NetX.Logging.LogMessage.Context">
            <summary>
            日志上下文
            </summary>
        </member>
        <member name="M:NetX.Logging.LogMessage.ToString">
            <summary>
            重写默认输出
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.Logging.Monitors.JsonBehavior">
            <summary>
            LoggingMonitor JSON 输出行为
            </summary>
        </member>
        <member name="F:NetX.Logging.Monitors.JsonBehavior.None">
            <summary>
            不输出 JSON 格式
            </summary>
            <remarks>默认值，输出文本日志</remarks>
        </member>
        <member name="F:NetX.Logging.Monitors.JsonBehavior.OnlyJson">
            <summary>
            只输出 JSON 格式
            </summary>
        </member>
        <member name="F:NetX.Logging.Monitors.JsonBehavior.All">
            <summary>
            输出 JSON 格式和文本日志
            </summary>
        </member>
        <member name="T:NetX.Logging.Monitors.LoggingMonitorAttribute">
            <summary>
            日志监听器
            </summary>
            <remarks>主要用于将请求的信息打印出来</remarks>
        </member>
        <member name="F:NetX.Logging.Monitors.LoggingMonitorAttribute._lazyRegex">
            <summary>
            模板正则表达式对象
            </summary>
        </member>
        <member name="F:NetX.Logging.Monitors.LoggingMonitorAttribute.FilterOrder">
            <summary>
            过滤器排序
            </summary>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorAttribute.Order">
            <summary>
            排序属性
            </summary>
        </member>
        <member name="F:NetX.Logging.Monitors.LoggingMonitorAttribute.LOG_CATEGORY_NAME">
            <summary>
            日志 LogName
            </summary>
            <remarks>方便对日志进行过滤写入不同的存储介质中</remarks>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.#ctor(NetX.Logging.Monitors.LoggingMonitorSettings)">
            <summary>
            构造函数
            </summary>
            <param name="settings"></param>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorAttribute.Title">
            <summary>
            日志标题
            </summary>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorAttribute.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorAttribute.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorAttribute.JsonBehavior">
            <summary>
            配置 Json 输出行为
            </summary>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorAttribute.Settings">
            <summary>
            配置信息
            </summary>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.OnActionExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ActionExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutionDelegate)">
            <summary>
            监视 Action 执行
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.GenerateAuthorizationTemplate(System.Text.Json.Utf8JsonWriter,System.Security.Claims.ClaimsPrincipal,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            生成 JWT 授权信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="claimsPrincipal"></param>
            <param name="authorization"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.GenerateParameterTemplate(System.Text.Json.Utf8JsonWriter,System.Collections.Generic.IDictionary{System.String,System.Object},System.Reflection.MethodInfo,Microsoft.Extensions.Primitives.StringValues)">
            <summary>
            生成请求参数信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="parameterValues"></param>
            <param name="method"></param>
            <param name="contentType"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.GenerateReturnInfomationTemplate(System.Text.Json.Utf8JsonWriter,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext,System.Reflection.MethodInfo)">
            <summary>
            生成返回值信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="resultContext"></param>
            <param name="method"></param>
            <param name="monitorMethod"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.GenerateExcetpionInfomationTemplate(System.Text.Json.Utf8JsonWriter,System.Exception)">
            <summary>
            生成异常信息日志模板
            </summary>
            <param name="writer"></param>
            <param name="exception"></param>
            <param name="isValidationException">是否是验证异常</param>
            <returns></returns>
        </member>
        <member name="F:NetX.Logging.Monitors.LoggingMonitorAttribute._serializerSettings">
            <summary>
            序列化默认配置
            </summary>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.TrySerializeObject(System.Object,System.Boolean@)">
            <summary>
            序列化对象
            </summary>
            <param name="obj"></param>
            <param name="succeed"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.Wrapper(System.String,System.String,System.String[])">
            <summary>
            生成规范日志模板
            </summary>
            <param name="title">标题</param>
            <param name="description">描述</param>
            <param name="items">列表项，如果以 ##xxx## 开头，自动生成 xxx: 属性</param>
            <returns><see cref="T:System.String"/></returns>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorAttribute.PadRight(System.String,System.Int32)">
            <summary>
            等宽文字对齐
            </summary>
            <param name="str"></param>
            <param name="totalByteCount"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Logging.Monitors.LoggingMonitorSettings">
            <summary>
            日志监视器配置
            </summary>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorSettings.WithReturnValue">
            <summary>
            是否记录返回值
            </summary>
            <remarks>bool 类型，默认输出</remarks>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorSettings.ReturnValueThreshold">
            <summary>
            设置返回值阈值
            </summary>
            <remarks>配置返回值字符串阈值，超过这个阈值将截断，默认全量输出</remarks>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorSettings.JsonBehavior">
            <summary>
            配置 Json 输出行为
            </summary>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorSettings.Configure">
            <summary>
            添加日志更多配置
            </summary>
        </member>
        <member name="M:NetX.Logging.Monitors.LoggingMonitorSettings.ConfigureLogger(System.Action{Microsoft.Extensions.Logging.ILogger,NetX.Logging.LogContext,Microsoft.AspNetCore.Mvc.Filters.ActionExecutedContext})">
            <summary>
            配置日志更多功能
            </summary>
            <param name="configure"></param>
        </member>
        <member name="P:NetX.Logging.Monitors.LoggingMonitorSettings.JsonWriterOptions">
            <summary>
            配置 Json 写入选项
            </summary>
        </member>
        <member name="T:NetX.Logging.Monitors.SuppressMonitorAttribute">
            <summary>
            控制跳过日志监视
            </summary>
            <remarks>作用于全局 <see cref="T:NetX.Logging.Monitors.LoggingMonitorAttribute"/></remarks>
        </member>
        <member name="T:NetX.Logging.Penetrates">
            <summary>
            常量、公共方法配置类
            </summary>
        </member>
        <member name="M:NetX.Logging.Penetrates.OutputStandardMessage(NetX.Logging.LogMessage,System.String)">
            <summary>
            输出标准日志消息
            </summary>
            <param name="logMsg"></param>
            <param name="dateFormat"></param>
            <param name="disableColors"></param>
            <param name="isConsole"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Penetrates.PadLeftAlign(System.String)">
            <summary>
            将日志内容进行对齐
            </summary>
            <param name="message"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Logging.Penetrates.GetLogLevelString(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            获取日志级别短名称
            </summary>
            <param name="logLevel">日志级别</param>
            <returns></returns>
        </member>
    </members>
</doc>
