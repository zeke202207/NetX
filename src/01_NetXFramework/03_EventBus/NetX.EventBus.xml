<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetX.EventBus</name>
    </assembly>
    <members>
        <member name="T:NetX.EventBus.EventHandlerContext">
            <summary>
            事件处理上下文
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerContext.Source">
            <summary>
            事件源
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerContext.Properties">
            <summary>
            共享上下文数据
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerContext.#ctor(NetX.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            事件处理上下文实例
            </summary>
            <param name="source">事件源</param>
            <param name="properties">共享上下文数据</param>
        </member>
        <member name="T:NetX.EventBus.EventHandlerExecutedContext">
            <summary>
            事件处理后上下文
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerExecutedContext.#ctor(NetX.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            事件处理后上下文实例
            </summary>
            <param name="source">事件源</param>
            <param name="properties">共享上下文数据</param>
        </member>
        <member name="P:NetX.EventBus.EventHandlerExecutedContext.ExcutedTime">
            <summary>
            执行后时间
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerExecutedContext.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:NetX.EventBus.EventHandlerExecutingContext">
            <summary>
            事件处理执行前上下文
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerExecutingContext.#ctor(NetX.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="P:NetX.EventBus.EventHandlerExecutingContext.ExecutingTime">
            <summary>
            执行前时间
            </summary>
        </member>
        <member name="T:NetX.EventBus.EventSubscribeAttribute">
            <summary>
            事件订阅者特性标签
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventSubscribeAttribute.EventId">
            <summary>
            事件唯一标识
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventSubscribeAttribute.#ctor(System.String)">
            <summary>
            订阅者特性实例
            </summary>
            <param name="eventId">事件唯一标识,必须为guid</param>
        </member>
        <member name="T:NetX.EventBus.EventBusHostService">
            <summary>
            事件总线后台主机服务
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventBusHostService._eventHandlers">
            <summary>
            事件处理程序集合
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.#ctor(Microsoft.Extensions.Logging.ILogger{NetX.EventBus.EventBusHostService},System.IServiceProvider,NetX.EventBus.IEventSourceStorer)">
            <summary>
            事件总线后台主机实例
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台处理程序
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.BindingAllEventSubscribers">
            <summary>
            绑定所有的处理事件
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.EventHandlerWrapper">
            <summary>
            事件处理程序包装器
            用于主机服务启动时将所有处理程序和事件id进行包装绑定
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerWrapper.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventHandlerWrapper.Handler">
            <summary>
            处理程序
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerWrapper.ShouldRun(System.String)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.EventPublisher">
            <summary>
            基于内存通道的事件发布者
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventPublisher._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventPublisher.#ctor(NetX.EventBus.IEventSourceStorer)">
            <summary>
            时间发布者实例
            </summary>
            <param name="eventSourceStorer"></param>
        </member>
        <member name="M:NetX.EventBus.EventPublisher.PublishAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:NetX.EventBus.EventSource">
            <summary>
            内存通道的事件源
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventSource.#ctor(System.String)">
            <summary>
            事件源对象
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:NetX.EventBus.EventSource.#ctor(System.String,System.Object)">
            <summary>
            事件源对象
            </summary>
            <param name="eventId">事件Id</param>
            <param name="payload">事件承载数据</param>
        </member>
        <member name="P:NetX.EventBus.EventSource.EventId">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventSource.Payload">
            <summary>
            事件承载数据
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventSource.CreatAt">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="T:NetX.EventBus.ChannelEventSourceStorer">
            <summary>
            基于内存管道的事件源记录器
            </summary>
        </member>
        <member name="F:NetX.EventBus.ChannelEventSourceStorer._channel">
            <summary>
            内存管道事件源记录器
            </summary>
        </member>
        <member name="M:NetX.EventBus.ChannelEventSourceStorer.#ctor(System.Int32)">
            <summary>
            事件源记录器对象
            </summary>
            <param name="capacity">存储器最大事件数量，超过这个数量，将丢弃最早的数据</param>
        </member>
        <member name="M:NetX.EventBus.ChannelEventSourceStorer.WriteAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            事件溯源写入器
            </summary>
            <param name="eventSource">事件源对象</param>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetX.EventBus.ChannelEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            事件源读取器
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:NetX.EventBus.EventBusOptionsBuilder">
            <summary>
            事件总线配置选项构建器
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventBusOptionsBuilder._eventSubscribers">
            <summary>
            事件订阅者类型集合
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventBusOptionsBuilder._eventSourceStorerImplementationFactory">
            <summary>
            事件存储器实现工厂
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventBusOptionsBuilder.ChannelCapacity">
            <summary>
            默认内置事件源存储器内存通道容量
            </summary>
            <remarks>超过 n 条待处理消息，第 n+1 条将进入等待，默认为 3000</remarks>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.AddSubscriber``1">
            <summary>
            注册事件订阅者
            </summary>
            <typeparam name="TEventSubscriber">实现自 <see cref="T:NetX.EventBus.IEventSubscriber"/></typeparam>
            <returns><see cref="T:NetX.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.AddSubscribers(System.Reflection.Assembly[])">
            <summary>
            批量注册事件订阅者
            </summary>
            <param name="assemblies">程序集</param>
            <returns><see cref="T:NetX.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.ReplaceStorer(System.Func{System.IServiceProvider,NetX.EventBus.IEventSourceStorer})">
            <summary>
            替换事件源存储器
            </summary>
            <param name="implementationFactory">自定义事件源存储器工厂</param>
            <returns><see cref="T:NetX.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构建事件总线配置选项
            </summary>
            <param name="services">服务集合对象</param>
        </member>
        <member name="T:NetX.EventBus.EventBusServiceCollectionExtensions">
            <summary>
            事件总线服务注入扩展
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{NetX.EventBus.EventBusOptionsBuilder})">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="configureOptionsBuilder">事件总线配置选项构建器委托</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.EventBus.EventBusOptionsBuilder)">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptionsBuilder">事件总线配置选项构建器</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusServiceCollectionExtensions.AddInternalService(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.EventBus.EventBusOptionsBuilder)">
            <summary>
            注册内部服务
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptions">事件总线配置选项</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="T:NetX.EventBus.IEventPublisher">
            <summary>
            事件发布接口
            </summary>
        </member>
        <member name="M:NetX.EventBus.IEventPublisher.PublishAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            发布一个事件源
            </summary>
            <param name="eventSource"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.IEventSource">
            <summary>
            事件源（事件的承载对象）
            </summary>
        </member>
        <member name="P:NetX.EventBus.IEventSource.EventId">
            <summary>
            事件的唯一标识
            </summary>
        </member>
        <member name="P:NetX.EventBus.IEventSource.Payload">
            <summary>
            事件携带的数据
            </summary>
        </member>
        <member name="P:NetX.EventBus.IEventSource.CreatAt">
            <summary>
            事件的创建时间
            </summary>
        </member>
        <member name="T:NetX.EventBus.IEventSourceStorer">
            <summary>
            事件源存储器
            存储器用于事件溯源
            </summary>
        </member>
        <member name="M:NetX.EventBus.IEventSourceStorer.WriteAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            事件源写入存储器
            </summary>
            <param name="eventSource"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.EventBus.IEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取事件源
            </summary>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.IEventSubscriber">
            <summary>
            事件的订阅者
            </summary>
        </member>
        <member name="M:NetX.EventBus.IEventSubscriber.Handler(NetX.EventBus.EventHandlerExecutingContext)">
            <summary>
            时间处理程序
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
    </members>
</doc>
