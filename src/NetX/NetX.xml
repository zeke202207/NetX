<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetX</name>
    </assembly>
    <members>
        <member name="T:NetX.DatabaseModelExtension">
            <summary>
            数据库实体对象转换扩展类
            </summary>
        </member>
        <member name="M:NetX.DatabaseModelExtension.ToConnStr(NetX.MutilTenant.DatabaseInfo)">
            <summary>
            根据数据库对象，转换链接字符串
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseModelExtension.ToConnStr(NetX.MutilTenant.DatabaseInfo,NetX.TenantType,System.String)">
            <summary>
            数据库连接字符串
            </summary>
            <param name="model"></param>
            <param name="type"></param>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseModelExtension.ToDatabaseName(NetX.MutilTenant.DatabaseInfo,NetX.TenantType,System.String)">
            <summary>
            数据库Schema name
            </summary>
            <param name="model"></param>
            <param name="type"></param>
            <param name="TenantId"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseModelExtension.ToCreateDatabaseConnStr(NetX.MutilTenant.DatabaseInfo)">
            <summary>
            获取创建数据库连接字符串
            </summary>
            <param name="model"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Utils.BaseFilter">
            <summary>
            netcore filter 过滤器基类
            filter 顺序：
            Authorization Filter  ----授权认证过滤器
            Resource Filter       ----资源过滤器
            Action Filter　　     ----Action过滤器
            Exception Filter      ----异常过滤器
            Result Filter         ----结果过滤器
            </summary>
        </member>
        <member name="T:NetX.App">
            <summary>
            全局应用程序类
            </summary>
        </member>
        <member name="P:NetX.App.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="P:NetX.App.HttpContext">
            <summary>
            获取请求上下文
            </summary>
        </member>
        <member name="P:NetX.App.Configuration">
            <summary>
            获取配置信息
            </summary>
        </member>
        <member name="M:NetX.App.#cctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="T:NetX.AppWebApplicationBuilderExtensions">
            <summary>
            应用程序扩展
            </summary>
        </member>
        <member name="M:NetX.AppWebApplicationBuilderExtensions.InjectFrameworkService(Microsoft.AspNetCore.Builder.WebApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注入系统服务
            </summary>
            <param name="webApplicationBuilder"></param>
            <param name="env"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.AppWebApplicationBuilderExtensions.InjectFrameworkApplication(Microsoft.AspNetCore.Builder.WebApplication,Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            注入系统应用
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.AppWebApplicationBuilderExtensions.InjectUserModulesService(Microsoft.AspNetCore.Builder.WebApplicationBuilder,System.Collections.Generic.Dictionary{System.Guid,NetX.ModuleOptions},Microsoft.AspNetCore.Hosting.IWebHostEnvironment,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            注入用户模块
            </summary>
            <param name="webApplicationBuilder"></param>
            <param name="options"></param>
            <param name="env"></param>
            <param name="config"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.AppWebApplicationBuilderExtensions.InjectUserModulesApplication(Microsoft.AspNetCore.Builder.WebApplication,System.Collections.Generic.Dictionary{System.Guid,NetX.ModuleOptions},Microsoft.AspNetCore.Hosting.IWebHostEnvironment)">
            <summary>
            注入用户模块应用
            </summary>
            <param name="app"></param>
            <param name="options"></param>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="P:NetX.InternalApp.RootServices">
            <summary>
            根服务
            </summary>
        </member>
        <member name="F:NetX.InternalApp.ModuleCotextKeyValuePairs">
            <summary>
            用户程序集集合
            </summary>
        </member>
        <member name="F:NetX.InternalApp.FrameworkContextKeyValuePairs">
            <summary>
            系统程序集集合
            </summary>
        </member>
        <member name="P:NetX.CorsAccessorOptions.PolicyName">
            <summary>
            策略名称
            </summary>
        </member>
        <member name="P:NetX.CorsAccessorOptions.PreflightMaxAge">
            <summary>
            预检过期时间
            </summary>
        </member>
        <member name="T:NetX.ModuleOptions">
            <summary>
            模块配置项
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.Id">
            <summary>
            Module唯一标识
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.Name">
            <summary>
            模块名称
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.Version">
            <summary>
            版本
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.Enabled">
            <summary>
            是否启用
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.FileName">
            <summary>
            插件模块入口dll名称
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.Dependencies">
            <summary>
            依赖文件列表
            相对地址
            </summary>
        </member>
        <member name="P:NetX.ModuleOptions.IsSharedAssemblyContext">
            <summary>
            是否是单独的上下文程序集
            </summary>
        </member>
        <member name="T:NetX.RunOption">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/> 方式进行配置
            </summary>
        </member>
        <member name="F:NetX.RunOption.ActionBuilder">
            <summary>
            自定义builder委托<see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/>
            </summary>
        </member>
        <member name="F:NetX.RunOption.ActionConfigure">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/>
            </summary>
        </member>
        <member name="F:NetX.RunOption.ActionConfigrationManager">
            <summary>
            <see cref="T:Microsoft.Extensions.Configuration.ConfigurationManager"/>
            </summary>
        </member>
        <member name="P:NetX.RunOption.ActionServiceCollection">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/>
            </summary>
        </member>
        <member name="P:NetX.RunOption.Options">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationOptions"/>
            </summary>
        </member>
        <member name="P:NetX.RunOption.Builder">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplicationBuilder"/>
            </summary>
        </member>
        <member name="P:NetX.RunOption.App">
            <summary>
            <see cref="T:Microsoft.AspNetCore.Builder.WebApplication"/>
            </summary>
        </member>
        <member name="P:NetX.RunOption.Modules">
            <summary>
            应用服务组件
            </summary>
        </member>
        <member name="P:NetX.RunOption.Default">
            <summary>
            默认配置项
            </summary>
        </member>
        <member name="M:NetX.RunOption.#ctor">
            <summary>
            内部配置类实例
            </summary>
        </member>
        <member name="M:NetX.RunOption.ConfigOption(Microsoft.AspNetCore.Builder.WebApplicationOptions)">
            <summary>
            
            </summary>
            <param name="option"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.RunOption.ConfigBuilder(System.Action{Microsoft.AspNetCore.Builder.WebApplicationBuilder})">
            <summary>
            
            </summary>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.RunOption.ConfigApplication(System.Action{Microsoft.AspNetCore.Builder.WebApplication})">
            <summary>
            
            </summary>
            <param name="application"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.RunOption.ConfigrationManager(System.Action{Microsoft.Extensions.Configuration.ConfigurationManager})">
            <summary>
            
            </summary>
            <param name="configrationManager"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:NetX.RunOption.InitModules" -->
        <member name="M:NetX.RunOption.InitUserModules">
            <summary>
            初始化用户自定义模块
            </summary>
        </member>
        <member name="T:NetX.ServerHost">
            <summary>
            服务宿主主机
            </summary>
        </member>
        <member name="M:NetX.ServerHost.Start(NetX.RunOption,System.String)">
            <summary>
            启动web服务器
            默认端口 5000/5001
            </summary>
            <param name="options"></param>
            <param name="urls"></param>
        </member>
        <member name="M:NetX.ServerModuleInitializer.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            配置服务
            Demo宏定义下的内容为使用示例，具体是否启用，清根据业务自定决定
            配置方法请参考<see cref="!:NetXTestWebApi.Program"/>
            </summary>
            <param name="services"></param>
            <param name="env"></param>
            <param name="context"></param>
        </member>
        <member name="M:NetX.ServerModuleInitializer.ConfigureApplication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            配置应用程序
            注释需要
            非连续与<see cref="M:NetX.ServerModuleInitializer.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)"/> 对应，方便阅读
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="context"></param>
        </member>
        <member name="T:NetX.Module.CollectibleAssemblyLoadContextProvider">
            <summary>
            可回收程序集provider
            </summary>
        </member>
        <member name="M:NetX.Module.CollectibleAssemblyLoadContextProvider.LoadCustomeModule(NetX.ModuleOptions,Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager,Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            加载用户模块
            </summary>
            <param name="options"></param>
            <param name="apm"></param>
            <param name="services"></param>
            <param name="env"></param>
            <param name="moduleContext"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Module.CollectibleAssemblyLoadContextProvider.LoadSharedCustomeModule(NetX.ModuleOptions,Microsoft.AspNetCore.Mvc.ApplicationParts.ApplicationPartManager,Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            加载用户模块  AssemblyLoadContext.Default
            </summary>
            <param name="options"></param>
            <param name="apm"></param>
            <param name="services"></param>
            <param name="env"></param>
            <param name="moduleContext"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Module.ModuleAssemblyLoadContext">
            <summary>
            独立模块程序集上下文
            </summary>
        </member>
        <member name="P:NetX.Module.ModuleAssemblyLoadContext.ModuleContext">
            <summary>
            模块上下文
            </summary>
        </member>
        <member name="M:NetX.Module.ModuleAssemblyLoadContext.#ctor(System.String,NetX.Module.ModuleContext)">
            <summary>
            isCollectible:ture 的时候允许 Unload
            </summary>
            <param name="moduleName"></param>
            <param name="moduleContext"></param>
        </member>
        <member name="T:NetX.Module.ModuleContext">
            <summary>
            模块上下文 
            </summary>
        </member>
        <member name="P:NetX.Module.ModuleContext.Configuration">
            <summary>
            配置项
            </summary>
        </member>
        <member name="P:NetX.Module.ModuleContext.ModuleOptions">
            <summary>
            模块配置项 <see cref="P:NetX.Module.ModuleContext.ModuleOptions"/>
            </summary>
        </member>
        <member name="P:NetX.Module.ModuleContext.Initialize">
            <summary>
            模块初始化器 <see cref="T:NetX.Module.ModuleInitializer"/>
            </summary>
        </member>
        <member name="M:NetX.Module.IApplicationModule.ConfigureApplication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            配置中间件
            </summary>
            <param name="app"></param>
            <param name="env"></param>
        </member>
        <member name="T:NetX.Module.IModule">
            <summary>
            模块初始化器接口
            </summary>
        </member>
        <member name="P:NetX.Module.IModule.Key">
            <summary>
            模块唯一标识
            </summary>
        </member>
        <member name="P:NetX.Module.IModule.ModuleType">
            <summary>
            模块类型
            </summary>
        </member>
        <member name="M:NetX.Module.IServiceModule.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            注入服务
            </summary>
            <param name="services"></param>
            <param name="env">环境变量</param>
        </member>
        <member name="T:NetX.Module.ModuleInitializer">
            <summary>
            Serve 组件应用服务组件
            </summary>
        </member>
        <member name="P:NetX.Module.ModuleInitializer.Key">
            <summary>
            模块唯一标识
            </summary>
        </member>
        <member name="P:NetX.Module.ModuleInitializer.ModuleType">
            <summary>
            模块类型
            </summary>
        </member>
        <member name="M:NetX.Module.ModuleInitializer.ConfigureServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            This method gets called by the runtime.
            Use this method to add services to the container.
            </summary>
            <param name="services"></param>
            <param name="env"></param>
            <param name="context"></param>
        </member>
        <member name="M:NetX.Module.ModuleInitializer.ConfigureApplication(Microsoft.AspNetCore.Builder.IApplicationBuilder,Microsoft.AspNetCore.Hosting.IWebHostEnvironment,NetX.Module.ModuleContext)">
            <summary>
            This method gets called by the runtime. 
            Use this method to configure the HTTP request pipeline.
            </summary>
            <param name="app"></param>
            <param name="env"></param>
            <param name="context"></param>
        </member>
        <member name="T:NetX.EventBus.EventHandlerContext">
            <summary>
            事件处理上下文
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerContext.Source">
            <summary>
            事件源
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerContext.Properties">
            <summary>
            共享上下文数据
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerContext.#ctor(NetX.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            事件处理上下文实例
            </summary>
            <param name="source">事件源</param>
            <param name="properties">共享上下文数据</param>
        </member>
        <member name="T:NetX.EventBus.EventHandlerExecutedContext">
            <summary>
            事件处理后上下文
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerExecutedContext.#ctor(NetX.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            事件处理后上下文实例
            </summary>
            <param name="source">事件源</param>
            <param name="properties">共享上下文数据</param>
        </member>
        <member name="P:NetX.EventBus.EventHandlerExecutedContext.ExcutedTime">
            <summary>
            执行后时间
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerExecutedContext.Exception">
            <summary>
            异常信息
            </summary>
        </member>
        <member name="T:NetX.EventBus.EventHandlerExecutingContext">
            <summary>
            事件处理执行前上下文
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerExecutingContext.#ctor(NetX.EventBus.IEventSource,System.Collections.Generic.IDictionary{System.Object,System.Object})">
            <summary>
            
            </summary>
            <param name="source"></param>
            <param name="properties"></param>
        </member>
        <member name="P:NetX.EventBus.EventHandlerExecutingContext.ExecutingTime">
            <summary>
            执行前时间
            </summary>
        </member>
        <member name="T:NetX.EventBus.EventSubscribeAttribute">
            <summary>
            事件订阅者特性标签
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventSubscribeAttribute.EventId">
            <summary>
            事件唯一标识
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventSubscribeAttribute.#ctor(System.String)">
            <summary>
            订阅者特性实例
            </summary>
            <param name="eventId">事件唯一标识,必须为guid</param>
        </member>
        <member name="T:NetX.EventBus.EventBusHostService">
            <summary>
            事件总线后台主机服务
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventBusHostService._eventHandlers">
            <summary>
            事件处理程序集合
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.#ctor(Microsoft.Extensions.Logging.ILogger{NetX.EventBus.EventBusHostService},System.IServiceProvider,NetX.EventBus.IEventSourceStorer)">
            <summary>
            事件总线后台主机实例
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
            执行后台任务
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.BackgroundProcessing(System.Threading.CancellationToken)">
            <summary>
            后台处理程序
            </summary>
            <param name="stoppingToken"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.EventBus.EventBusHostService.BindingAllEventSubscribers">
            <summary>
            绑定所有的处理事件
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.EventHandlerWrapper">
            <summary>
            事件处理程序包装器
            用于主机服务启动时将所有处理程序和事件id进行包装绑定
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventHandlerWrapper.EventId">
            <summary>
            事件Id
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventHandlerWrapper.Handler">
            <summary>
            处理程序
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventHandlerWrapper.ShouldRun(System.String)">
            <summary>
            
            </summary>
            <param name="eventId"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.EventPublisher">
            <summary>
            基于内存通道的事件发布者
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventPublisher._eventSourceStorer">
            <summary>
            事件源存储器
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventPublisher.#ctor(NetX.EventBus.IEventSourceStorer)">
            <summary>
            时间发布者实例
            </summary>
            <param name="eventSourceStorer"></param>
        </member>
        <member name="M:NetX.EventBus.EventPublisher.PublishAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            发布一条消息
            </summary>
            <param name="eventSource"></param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:NetX.EventBus.EventSource">
            <summary>
            内存通道的事件源
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventSource.#ctor(System.String)">
            <summary>
            事件源对象
            </summary>
            <param name="eventId"></param>
        </member>
        <member name="M:NetX.EventBus.EventSource.#ctor(System.String,System.Object)">
            <summary>
            事件源对象
            </summary>
            <param name="eventId">事件Id</param>
            <param name="payload">事件承载数据</param>
        </member>
        <member name="P:NetX.EventBus.EventSource.EventId">
            <summary>
            事件ID
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventSource.Payload">
            <summary>
            事件承载数据
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventSource.CreatAt">
            <summary>
            事件创建时间
            </summary>
        </member>
        <member name="T:NetX.EventBus.ChannelEventSourceStorer">
            <summary>
            基于内存管道的事件源记录器
            </summary>
        </member>
        <member name="F:NetX.EventBus.ChannelEventSourceStorer._channel">
            <summary>
            内存管道事件源记录器
            </summary>
        </member>
        <member name="M:NetX.EventBus.ChannelEventSourceStorer.#ctor(System.Int32)">
            <summary>
            事件源记录器对象
            </summary>
            <param name="capacity">存储器最大事件数量，超过这个数量，将丢弃最早的数据</param>
        </member>
        <member name="M:NetX.EventBus.ChannelEventSourceStorer.WriteAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            事件溯源写入器
            </summary>
            <param name="eventSource">事件源对象</param>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="M:NetX.EventBus.ChannelEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            事件源读取器
            </summary>
            <returns></returns>
            <exception cref="T:System.NotImplementedException"></exception>
        </member>
        <member name="T:NetX.EventBus.EventBusOptionsBuilder">
            <summary>
            事件总线配置选项构建器
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventBusOptionsBuilder._eventSubscribers">
            <summary>
            事件订阅者类型集合
            </summary>
        </member>
        <member name="F:NetX.EventBus.EventBusOptionsBuilder._eventSourceStorerImplementationFactory">
            <summary>
            事件存储器实现工厂
            </summary>
        </member>
        <member name="P:NetX.EventBus.EventBusOptionsBuilder.ChannelCapacity">
            <summary>
            默认内置事件源存储器内存通道容量
            </summary>
            <remarks>超过 n 条待处理消息，第 n+1 条将进入等待，默认为 3000</remarks>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.AddSubscriber``1">
            <summary>
            注册事件订阅者
            </summary>
            <typeparam name="TEventSubscriber">实现自 <see cref="T:NetX.EventBus.IEventSubscriber"/></typeparam>
            <returns><see cref="T:NetX.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.AddSubscribers(System.Reflection.Assembly[])">
            <summary>
            批量注册事件订阅者
            </summary>
            <param name="assemblies">程序集</param>
            <returns><see cref="T:NetX.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.ReplaceStorer(System.Func{System.IServiceProvider,NetX.EventBus.IEventSourceStorer})">
            <summary>
            替换事件源存储器
            </summary>
            <param name="implementationFactory">自定义事件源存储器工厂</param>
            <returns><see cref="T:NetX.EventBus.EventBusOptionsBuilder"/> 实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusOptionsBuilder.Build(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            构建事件总线配置选项
            </summary>
            <param name="services">服务集合对象</param>
        </member>
        <member name="T:NetX.EventBus.EventBusServiceCollectionExtensions">
            <summary>
            事件总线服务注入扩展
            </summary>
        </member>
        <member name="M:NetX.EventBus.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{NetX.EventBus.EventBusOptionsBuilder})">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="configureOptionsBuilder">事件总线配置选项构建器委托</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusServiceCollectionExtensions.AddEventBus(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.EventBus.EventBusOptionsBuilder)">
            <summary>
            添加 EventBus 模块注册
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptionsBuilder">事件总线配置选项构建器</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="M:NetX.EventBus.EventBusServiceCollectionExtensions.AddInternalService(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.EventBus.EventBusOptionsBuilder)">
            <summary>
            注册内部服务
            </summary>
            <param name="services">服务集合对象</param>
            <param name="eventBusOptions">事件总线配置选项</param>
            <returns>服务集合实例</returns>
        </member>
        <member name="T:NetX.EventBus.IEventPublisher">
            <summary>
            事件发布接口
            </summary>
        </member>
        <member name="M:NetX.EventBus.IEventPublisher.PublishAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            发布一个事件源
            </summary>
            <param name="eventSource"></param>
            <param name="cancellationToken"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.IEventSource">
            <summary>
            事件源（事件的承载对象）
            </summary>
        </member>
        <member name="P:NetX.EventBus.IEventSource.EventId">
            <summary>
            事件的唯一标识
            </summary>
        </member>
        <member name="P:NetX.EventBus.IEventSource.Payload">
            <summary>
            事件携带的数据
            </summary>
        </member>
        <member name="P:NetX.EventBus.IEventSource.CreatAt">
            <summary>
            事件的创建时间
            </summary>
        </member>
        <member name="T:NetX.EventBus.IEventSourceStorer">
            <summary>
            事件源存储器
            存储器用于事件溯源
            </summary>
        </member>
        <member name="M:NetX.EventBus.IEventSourceStorer.WriteAsync(NetX.EventBus.IEventSource,System.Threading.CancellationToken)">
            <summary>
            事件源写入存储器
            </summary>
            <param name="eventSource"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.EventBus.IEventSourceStorer.ReadAsync(System.Threading.CancellationToken)">
            <summary>
            从存储器中读取事件源
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.EventBus.IEventSubscriber">
            <summary>
            事件的订阅者
            </summary>
        </member>
        <member name="M:NetX.EventBus.IEventSubscriber.Handler(NetX.EventBus.EventHandlerExecutingContext)">
            <summary>
            时间处理程序
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Authentication.ClaimModelAttribute">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Authentication.ClaimModelAttribute.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="claimKey"></param>
        </member>
        <member name="T:NetX.Authentication.NoPermissionAttribute">
            <summary>
            通用权限模块，登录即可访问，不需要授权
            </summary>
        </member>
        <member name="T:NetX.Authentication.PermissionValidateAttribute">
            <summary>
            权限验证特性
            </summary>
        </member>
        <member name="M:NetX.Authentication.PermissionValidateAttribute.OnAuthorization(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            鉴权验证
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:NetX.Authentication.PermissionValidateAttribute.OnAuthorizationAsync(Microsoft.AspNetCore.Mvc.Filters.AuthorizationFilterContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Authentication.JWT.JwtLoginHandler">
            <summary>
            Jwt 登录处理
            </summary>
        </member>
        <member name="M:NetX.Authentication.JWT.JwtLoginHandler.#ctor(NetX.Authentication.JWT.JwtOptions,Microsoft.Extensions.Logging.ILogger{NetX.Authentication.JWT.JwtLoginHandler})">
            <summary>
            
            </summary>
            <param name="options"></param>
            <param name="logger"></param>
        </member>
        <member name="M:NetX.Authentication.JWT.JwtLoginHandler.Handle(NetX.Authentication.ClaimModel,System.String)">
            <summary>
            
            </summary>
            <param name="claimModel"></param>
            <param name="extendData"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Authentication.JWT.JwtLoginHandler.Build(System.Security.Claims.Claim[])">
            <summary>
            生成token信息
            </summary>
            <param name="claims"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.Authentication.JWT.JwtLoginHandler.ResolveJWT(System.String)">
            <summary>
            解析Token
            </summary>
            <param name="token"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.Authentication.JWT.JwtOptions">
            <summary>
            JWT配置项
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtOptions.Key">
            <summary>
            Key
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtOptions.Issuer">
            <summary>
            发行人
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtOptions.Audience">
            <summary>
            消费者
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtOptions.Expires">
            <summary>
            有效期(分钟，默认120)
            </summary>
        </member>
        <member name="T:NetX.Authentication.JWT.JwtTokenModel">
            <summary>
            JWT令牌
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtTokenModel.AccessToken">
            <summary>
            jwt令牌
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtTokenModel.RefreshToken">
            <summary>
            刷新令牌
            </summary>
        </member>
        <member name="P:NetX.Authentication.JWT.JwtTokenModel.ExpiresIn">
            <summary>
            有效期(秒)
            对接口调用方而言，非严格意义上的过期，从调用接口前开始计算时间
            </summary>
        </member>
        <member name="T:NetX.Authentication.JWT.ServiceCollectionExtensions">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.Authentication.JWT.ServiceCollectionExtensions.AddJwtAuth(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            添加Jwt认证
            </summary>
            <param name="services"></param>
            <param name="config">配置项</param>
        </member>
        <member name="T:NetX.Authentication.ILoginHandler">
            <summary>
             登录处理接口
            </summary>
        </member>
        <member name="M:NetX.Authentication.ILoginHandler.Handle(NetX.Authentication.ClaimModel,System.String)">
            <summary>
            登录处理
            </summary>
            <param name="claimModel">信息</param>
            <param name="extendData">扩展数据</param>
            <returns></returns>
        </member>
        <member name="T:NetX.Authentication.IPermissionValidateHandler">
            <summary>
            权限验证接口
            </summary>
        </member>
        <member name="M:NetX.Authentication.IPermissionValidateHandler.Validate(Microsoft.AspNetCore.Http.HttpContext,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            验证
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.Authentication.ClaimModel">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.NetXPrincipal">
            <summary>
            主体对象
            用户信息、角色信息等
            </summary>
        </member>
        <member name="F:NetX.MutilTenant.NetXPrincipal.Identity">
            <summary>
            身份信息
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.TenantType">
            <summary>
            租户系统类型
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.UserId">
            <summary>
            内部唯一标识
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.UserName">
            <summary>
            登录名
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.DisplayName">
            <summary>
            显示名
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.DatabaseInfo">
            <summary>
            数据库配置信息 
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.ConnectionStr">
            <summary>
            数据库连接字符串
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.CreateSchemaConnectionStr">
            <summary>
            创建数据需要的连接字符串
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.NetXPrincipal.DatabaseName">
            <summary>
            Schema Name
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.NetXPrincipal.#ctor(System.Security.Principal.IIdentity,NetX.MutilTenant.Tenant,NetX.MutilTenant.TenantOption)">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.TenantContext">
            <summary>
            租户上下文
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.TenantContext.Current">
            <summary>
            当前线程的租户上下文信息
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantContext.Init(NetX.MutilTenant.NetXPrincipal)">
            <summary>
            初始化租户信息
            </summary>
            <param name="principal"></param>
        </member>
        <member name="P:NetX.MutilTenant.TenantContext.Principal">
            <summary>
            主体对象
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.ApplicationBuilderExtensions.UseMultiTenancy``1(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Teanant Middleware to process the request
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.ApplicationBuilderExtensions.UseMultiTenancy(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Use the Teanant Middleware to process the request
            </summary>
            <typeparam name="T"></typeparam>
            <param name="builder"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.HttpContextExtensions">
            <summary>
            扩展http上下文，使multi tenancy 使用起来更方便 
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.HttpContextExtensions.GetTenant``1(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前租户信息
            </summary>
            <typeparam name="T"></typeparam>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.HttpContextExtensions.GetTenant(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            获取当前租户信息
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.ServiceCollectionExtensions">
            <summary>
            多租户注入
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.ServiceCollectionExtensions.AddTenancy``1(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.TenantType)">
            <summary>
            多租户注入
            </summary>
            <typeparam name="T"></typeparam>
            <param name="service"></param>
            <param name="tenantType">租户类型，如果租户类型为单租户，<see cref="T:NetX.MutilTenant.TenantBuilder`1"/>将忽略所有注入</param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.ServiceCollectionExtensions.AddTenancy(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.TenantType)">
            <summary>
            多租户注入 
            </summary>
            <param name="service"></param>
            <param name="tenantType">租户类型，如果租户类型为单租户，<see cref="T:NetX.MutilTenant.TenantBuilder`1"/>将忽略所有注入</param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.TenantBuilder`1">
            <summary>
            配置tenant的services 
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantBuilder`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.TenantType)">
            <summary>
            租户注入构建器
            </summary>
            <param name="services"></param>
            <param name="tenantType"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantBuilder`1.WithDatabaseInfo(NetX.MutilTenant.DatabaseInfo)">
            <summary>
            配置数据库
            </summary>
            <param name="database"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.TenantBuilder`1.WithResolutionStrategy``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            注册租户解析实现
            </summary>
            <typeparam name="V"></typeparam>
            <param name="lifetime"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.TenantBuilder`1.WithStore``1(Microsoft.Extensions.DependencyInjection.ServiceLifetime)">
            <summary>
            注册租户信息存储实现
            </summary>
            <typeparam name="V"></typeparam>
            <param name="serviceLifetime"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.TenantBuilder`1.WithPerTenantOptions``1(System.Action{``0,`0})">
            <summary>
            每个租户注册单独的配置
            </summary>
            <typeparam name="TOptions">Type of options we are apply configuration to</typeparam>
            <param name="tenantConfig">Action to configure options for a tenant</param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.TenantBuilder`1.DefaultSingleTenant">
            <summary>
            默认单租户注入
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.TenantMiddleware`1">
            <summary>
            租户中间件
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantMiddleware`1.#ctor(Microsoft.AspNetCore.Http.RequestDelegate)">
            <summary>
            租户中间件实例
            </summary>
            <param name="next"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantMiddleware`1.Invoke(Microsoft.AspNetCore.Http.HttpContext)">
            <summary>
            中间件执行方法
            </summary>
            <param name="context"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.TenantContextFilter">
            <summary>
            TenantContext过滤器
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantContextFilter.#ctor(NetX.MutilTenant.ITenantAccessor{NetX.MutilTenant.Tenant},NetX.MutilTenant.TenantOption,NetX.DatabaseSetup.MigrationService)">
            <summary>
            TenantContext资源过滤器实例
            </summary>
            <param name="accessor"></param>
            <param name="tenantOption"></param>
            <param name="migrationService"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantContextFilter.OnResourceExecuted(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutedContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantContextFilter.OnResourceExecuting(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext)">
            <summary>
            
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantContextFilter.OnResourceExecutionAsync(Microsoft.AspNetCore.Mvc.Filters.ResourceExecutingContext,Microsoft.AspNetCore.Mvc.Filters.ResourceExecutionDelegate)">
            <summary>
            
            </summary>
            <param name="context"></param>
            <param name="next"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.InMemoryTenantStore">
            <summary>
            内存租户信息存储
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.InMemoryTenantStore.GetTenantAsync(System.String)">
            <summary>
            根据租户身份获取租户信息
            </summary>
            <param name="Identifier">租户身份</param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.InMemoryTenantProvider.Init">
            <summary>
            配置文件初始化Tenants列表
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.HeaderResolutionStrategy">
            <summary>
            请求头解析策略
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.HeaderResolutionStrategy.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            请求头解析策略实例
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:NetX.MutilTenant.HeaderResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            从请求头获取租户唯一标识
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.HostResolutionStrategy">
            <summary>
            根据主机解析租户身份
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.HostResolutionStrategy.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            主机解析策略
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="M:NetX.MutilTenant.HostResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            解析租户身份 
            </summary>
            <returns>租户身份标识</returns>
        </member>
        <member name="T:NetX.MutilTenant.TenantAccessor`1">
            <summary>
            租户访问器
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetX.MutilTenant.TenantAccessor`1.#ctor(Microsoft.AspNetCore.Http.IHttpContextAccessor)">
            <summary>
            租户访问器实例
            </summary>
            <param name="httpContextAccessor"></param>
        </member>
        <member name="P:NetX.MutilTenant.TenantAccessor`1.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.TenantAccessService`1">
            <summary>
            租户访问访问
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantAccessService`1.#ctor(NetX.MutilTenant.ITenantResolutionStrategy,NetX.MutilTenant.ITenantStore{`0})">
            <summary>
            租户访问访问实例
            </summary>
            <param name="tenantResolutionStrategy"></param>
            <param name="tenantStore"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantAccessService`1.GetTenatnAsync">
            <summary>
            湖区当前租户信息
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.TenantOptions`1">
            <summary>
            Make IOptions tenant aware
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.TenantOptionsCache`2">
            <summary>
            租户选项缓存
            为每一个租户维护一个专有的选项缓存
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsCache`2.#ctor(NetX.MutilTenant.ITenantAccessor{`1})">
            <summary>
            
            </summary>
            <param name="tenantAccessor"></param>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsCache`2.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsCache`2.GetOrAdd(System.String,System.Func{`0})">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="createOptions"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsCache`2.TryAdd(System.String,`0)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <param name="options"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsCache`2.TryRemove(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <!-- Badly formed XML comment ignored for member "T:NetX.MutilTenant.TenantOptionsCacheDictionary`1" -->
        <member name="F:NetX.MutilTenant.TenantOptionsCacheDictionary`1._tenantSpecificOptionCaches">
            <summary>
            Caches stored in memory
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsCacheDictionary`1.Get(System.String)">
            <summary>
            Get options for specific tenant (create if not exists)
            </summary>
            <param name="tenantId"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.TenantOptionsFactory`2">
            <summary>
            租户配置项感知工厂 
            </summary>
            <typeparam name="TOptions"></typeparam>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetX.MutilTenant.TenantOptionsFactory`2.Create(System.String)">
            <summary>
            Create a new options instance
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.ITenantAccessor`1">
            <summary>
            租户访问器 
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.ITenantAccessor`1.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.ITenantResolutionStrategy">
            <summary>
            组合解析策略
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.ITenantResolutionStrategy.GetTenantIdentifierAsync">
            <summary>
            解析获取租户身份
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.ITenantStore`1">
            <summary>
            租户存储接口
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:NetX.MutilTenant.ITenantStore`1.GetTenantAsync(System.String)">
            <summary>
            根据租户身份，获取租户信息
            </summary>
            <param name="Identifier">租户身份</param>
            <returns></returns>
        </member>
        <member name="T:NetX.MutilTenant.DatabaseInfo">
            <summary>
            数据库配置信息
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.DatabaseInfo.DatabaseName">
            <summary>
            数据库名称
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.DatabaseInfo.DatabaseHost">
            <summary>
            数据库主机
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.DatabaseInfo.DatabasePort">
            <summary>
            数据库端口
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.DatabaseInfo.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.DatabaseInfo.UserId">
            <summary>
            数据库登录user
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.DatabaseInfo.Password">
            <summary>
            数据库登录密码 
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.Tenant">
            <summary>
            租户信息
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.Tenant.TenantId">
            <summary>
            租户Id
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.Tenant.Identifier">
            <summary>
            租户身份标识
            在解析策略中使用此标识符进行解析
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.Tenant.Items">
            <summary>
            The Tenant Items
            </summary>
        </member>
        <member name="T:NetX.MutilTenant.TenantOption">
            <summary>
            租户设置信息
            </summary>
        </member>
        <member name="M:NetX.MutilTenant.TenantOption.#ctor(NetX.TenantType)">
            <summary>
            租户配置信息
            </summary>
            <param name="tenantType"></param>
        </member>
        <member name="P:NetX.MutilTenant.TenantOption.TenantType">
            <summary>
            应用程序租户类型
            </summary>
        </member>
        <member name="P:NetX.MutilTenant.TenantOption.DatabaseInfo">
            <summary>
            应用程序数据配置
            </summary>
        </member>
        <member name="T:NetX.DatabaseSetup.FluentMigrationExtensions">
            <summary>
            数据库迁移扩展方法
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.FluentMigrationExtensions.AddMigratorAssembly(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <summary>
            添加迁移程序集
            </summary>
            <param name="services"></param>
            <param name="assemblies"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.FluentMigrationExtensions.BuildFluentMigrator(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
             数据迁移服务注入
            </summary>
            <param name="services"></param>
            <param name="assemblies">需要迁移的程序集集合</param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.FluentMigrationExtensions.BuildFluentMigrator(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[],NetX.MigrationSupportDbType)">
            <summary>
            数据迁移服务注入
            </summary>
            <param name="services"></param>
            <param name="assemblies"></param>
            <param name="supportDbType"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.FluentMigrationExtensions.AddDatabase(FluentMigrator.Runner.IMigrationRunnerBuilder,NetX.MigrationSupportDbType)">
            <summary>
            添加支持的数据库
            </summary>
            <param name="builder"></param>
            <param name="supportDbType"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.DatabaseSetup.MigrationAssemblySource">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.MigrationAssemblySource.Assemblies">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.DatabaseSetup.MigrationRunnerLogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationRunnerLogger.BeginScope``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationRunnerLogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationRunnerLogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="T:NetX.DatabaseSetup.MigrationValidatorlogger">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationValidatorlogger.BeginScope``1(``0)">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="state"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationValidatorlogger.IsEnabled(Microsoft.Extensions.Logging.LogLevel)">
            <summary>
            
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationValidatorlogger.Log``1(Microsoft.Extensions.Logging.LogLevel,Microsoft.Extensions.Logging.EventId,``0,System.Exception,System.Func{``0,System.Exception,System.String})">
            <summary>
            
            </summary>
            <typeparam name="TState"></typeparam>
            <param name="logLevel"></param>
            <param name="eventId"></param>
            <param name="state"></param>
            <param name="exception"></param>
            <param name="formatter"></param>
        </member>
        <member name="T:NetX.DatabaseSetup.TenantConnectionStringReader">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantConnectionStringReader.Priority">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.TenantConnectionStringReader.GetConnectionString(System.String)">
            <summary>
            
            </summary>
            <param name="connectionStringOrName"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.DatabaseSetup.TenantMigrationVersionTable">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.TenantMigrationVersionTable.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.SchemaName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.TableName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.ColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.UniqueIndexName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.AppliedOnColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.DescriptionColumnName">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.OwnsSchema">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantMigrationVersionTable.ApplicationContext">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.DatabaseSetup.TenantProcessorOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantProcessorOptions.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.TenantProcessorOptions.Get(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.DatabaseSetup.TenantRunnerOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantRunnerOptions.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.TenantRunnerOptions.Get(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.DatabaseSetup.TenantSelectingProcessorAccessorOptions">
            <summary>
            
            </summary>
        </member>
        <member name="P:NetX.DatabaseSetup.TenantSelectingProcessorAccessorOptions.Value">
            <summary>
            
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.TenantSelectingProcessorAccessorOptions.Get(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:NetX.DatabaseSetup.MigrationService">
            <summary>
            数据迁移服务
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.#ctor(Microsoft.Extensions.DependencyInjection.IServiceCollection,NetX.MigrationSupportDbType)">
            <summary>
            数据迁移服务实例
            </summary>
            <param name="services"></param>
            <param name="supportDbType"></param>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.SetupDatabase">
            <summary>
            创建数据库
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.CraeteDatabase">
            <summary>
            创建数据库
            </summary>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.GetDatabaseFactory(System.IServiceProvider)">
            <summary>
            获取数据库连接工厂
            </summary>
            <param name="serviceProvider"></param>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.QueryDatabaseSql">
            <summary>
            获取数据库是否存在查询语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.CreateDatabaseSql">
            <summary>
            建库语句
            </summary>
            <returns></returns>
        </member>
        <member name="M:NetX.DatabaseSetup.MigrationService.MigrationTables">
            <summary>
            数据库迁移
            </summary>
            <returns></returns>
        </member>
        <member name="T:NetX.NetXConst">
            <summary>
            
            </summary>
        </member>
        <member name="F:NetX.NetXConst.C_SERVERHOST_MODULE_ID">
            <summary>
            server host 模块唯一标识
            </summary>
        </member>
        <member name="F:NetX.NetXConst.C_MODULE_DIRECTORYNAME">
            <summary>
            目录名称
            </summary>
        </member>
        <member name="F:NetX.NetXConst.C_MODULE_CINFIGFILENAME">
            <summary>
            模块配置文件名称
            </summary>
        </member>
        <member name="F:NetX.NetXConst.C_MODULE_REFDIRECTORYNAME">
            <summary>
            Ref引用文件目录
            </summary>
        </member>
        <member name="F:NetX.NetXConst.C_TENANT_HTTPREQUESTHEADERKEY">
            <summary>
            http请求头租户key标识
            </summary>
        </member>
        <member name="F:NetX.NetXConst.C_TENANT_HTTPCONTEXTTENANTKEY">
            <summary>
            tenantcontext上下文标识
            </summary>
        </member>
        <member name="F:NetX.NetXConst.AccoundId">
            <summary>
            登录用户内部Id
            </summary>
        </member>
        <member name="F:NetX.NetXConst.AccountName">
            <summary>
            登录用户名
            </summary>
        </member>
        <member name="F:NetX.NetXConst.LoginTime">
            <summary>
            最后登录时间
            </summary>
        </member>
        <member name="T:NetX.ModuleType">
            <summary>
            模块类型
            </summary>
        </member>
        <member name="F:NetX.ModuleType.FrameworkModule">
            <summary>
            系统框架模块
            </summary>
        </member>
        <member name="F:NetX.ModuleType.UserModule">
            <summary>
            业务模块
            </summary>
        </member>
        <member name="T:NetX.MigrationSupportDbType">
            <summary>
            code first 数据迁移支持的数据库类型
            </summary>
        </member>
        <member name="F:NetX.MigrationSupportDbType.MySql5">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.DatabaseType">
            <summary>
            数据库类型
            </summary>
        </member>
        <member name="F:NetX.DatabaseType.MySql">
            <summary>
            
            </summary>
        </member>
        <member name="T:NetX.TenantType">
            <summary>
            租户类型
            </summary>
        </member>
        <member name="F:NetX.TenantType.Single">
            <summary>
            单租户系统
            </summary>
        </member>
        <member name="F:NetX.TenantType.Multi">
            <summary>
            多租户系统
            </summary>
        </member>
    </members>
</doc>
